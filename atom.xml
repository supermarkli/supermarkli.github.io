<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吃糠咽菜</title>
  
  <subtitle>好记性不如烂笔头</subtitle>
  <link href="https://supermarkli.github.io/atom.xml" rel="self"/>
  
  <link href="https://supermarkli.github.io/"/>
  <updated>2025-08-13T07:05:10.666Z</updated>
  <id>https://supermarkli.github.io/</id>
  
  <author>
    <name>吃糠咽菜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 语法与工程骨架</title>
    <link href="https://supermarkli.github.io/posts/6a8247a7/"/>
    <id>https://supermarkli.github.io/posts/6a8247a7/</id>
    <published>2025-08-13T06:42:41.000Z</published>
    <updated>2025-08-13T07:05:10.666Z</updated>
    
    
    <summary type="html">&lt;p&gt;想在大型项目里写出“既优雅又不掉坑”的 Python？本文用 &lt;strong&gt;抽象基类 → 生成器 → 类型提示 → 模块组织&lt;/strong&gt; 四步，给你一套可复用的工程骨架。</summary>
    
    
    
    <category term="软件开发" scheme="https://supermarkli.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="Python" scheme="https://supermarkli.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Python/"/>
    
    
    <category term="Python" scheme="https://supermarkli.github.io/tags/Python/"/>
    
    <category term="工程实践" scheme="https://supermarkli.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>CUDA核心概念与内存层次</title>
    <link href="https://supermarkli.github.io/posts/d4b8f045/"/>
    <id>https://supermarkli.github.io/posts/d4b8f045/</id>
    <published>2025-08-13T04:11:31.000Z</published>
    <updated>2025-08-13T06:10:56.415Z</updated>
    
    
    <summary type="html">&lt;p&gt;想在一张图看懂 GPU 的线程组织与内存层次？本文用表格 + Mermaid 图 + 代码示例，3 分钟带你摸清 Kernel、Warp、合并访存与 bank 冲突的底层逻辑。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>H100 服务器 CUDA + PyTorch 环境速配指南</title>
    <link href="https://supermarkli.github.io/posts/e5b1c8d2/"/>
    <id>https://supermarkli.github.io/posts/e5b1c8d2/</id>
    <published>2025-08-11T09:20:08.000Z</published>
    <updated>2025-08-11T09:37:54.995Z</updated>
    
    
    <summary type="html">&lt;p&gt;想在全新的 Ubuntu-24.04 + H100 机器上“第一天就跑通 GPU 代码”？&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://supermarkli.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="环境配置" scheme="https://supermarkli.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="CUDA" scheme="https://supermarkli.github.io/tags/CUDA/"/>
    
    <category term="PyTorch" scheme="https://supermarkli.github.io/tags/PyTorch/"/>
    
    <category term="H100" scheme="https://supermarkli.github.io/tags/H100/"/>
    
    <category term="GPU" scheme="https://supermarkli.github.io/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>GPU 工作原理：和 CPU 有何不同？</title>
    <link href="https://supermarkli.github.io/posts/d1a2c3b4/"/>
    <id>https://supermarkli.github.io/posts/d1a2c3b4/</id>
    <published>2025-08-10T09:38:06.000Z</published>
    <updated>2025-08-11T02:52:42.294Z</updated>
    
    
    <summary type="html">&lt;p&gt;如果把 CPU 比作“多才多艺的总管”，GPU 更像“高效的流水线工厂”：CPU 擅长复杂分支与少量任务的低延迟处理，GPU 擅长大量相同/相似任务的高吞吐处理。本文先给出关键概念，再用 CPU 对比串起 GPU 的架构、执行模型、内存层次与性能要点。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="硬件体系结构" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%A1%AC%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="GPU" scheme="https://supermarkli.github.io/tags/GPU/"/>
    
    <category term="CPU" scheme="https://supermarkli.github.io/tags/CPU/"/>
    
    <category term="并行计算" scheme="https://supermarkli.github.io/tags/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux 包管理：从入门到进阶的实战指南</title>
    <link href="https://supermarkli.github.io/posts/3b71e21f/"/>
    <id>https://supermarkli.github.io/posts/3b71e21f/</id>
    <published>2025-08-08T08:19:11.000Z</published>
    <updated>2025-08-08T09:02:15.070Z</updated>
    
    
    <summary type="html">&lt;p&gt;如果把发行版比作操作系统的“应用商店”，包管理器就是开发与运维最常用的“装、删、查、管”工具。本文从概念到实操、从单机到团队，给出一份可以落地的学习大纲与命令速查，帮助你跨发行版高效工作。&lt;/p&gt;</summary>
    
    
    
    <category term="技术工具" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Linux" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/Linux/"/>
    
    
    <category term="Linux" scheme="https://supermarkli.github.io/tags/Linux/"/>
    
    <category term="包管理" scheme="https://supermarkli.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    <category term="Package" scheme="https://supermarkli.github.io/tags/Package/"/>
    
  </entry>
  
  <entry>
    <title>开源许可证速查：MIT、Apache 2.0、GPL v3 怎么选？</title>
    <link href="https://supermarkli.github.io/posts/c3f2a1b9/"/>
    <id>https://supermarkli.github.io/posts/c3f2a1b9/</id>
    <published>2025-08-08T07:14:41.000Z</published>
    <updated>2025-08-08T07:18:00.387Z</updated>
    
    
    <summary type="html">&lt;p&gt;面对五花八门的开源许可证，最常被问到的无非三件事：能不能商用？能不能改了闭源？要不要写专利和修改声明？这篇文章用一张速查表和几条决策准则，帮你在 1 分钟内选对证。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="开源" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%BC%80%E6%BA%90/"/>
    
    
    <category term="开源" scheme="https://supermarkli.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="License" scheme="https://supermarkli.github.io/tags/License/"/>
    
    <category term="许可证" scheme="https://supermarkli.github.io/tags/%E8%AE%B8%E5%8F%AF%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>混合加密入门：集安全与效率于一身的艺术</title>
    <link href="https://supermarkli.github.io/posts/8c9a7e4f/"/>
    <id>https://supermarkli.github.io/posts/8c9a7e4f/</id>
    <published>2025-08-08T02:00:00.000Z</published>
    <updated>2025-08-06T08:49:33.102Z</updated>
    
    
    <summary type="html">&lt;p&gt;在数字世界中，我们渴望两全其美：既想要信息传输绝对安全，又追求其过程畅快高效。若把数据加密比作锁门，我们面临一个两难选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对称加密&lt;/strong&gt;像一把普通的房门钥匙：开锁和上锁都用同一把，速度飞快，但把这把唯一的钥匙安全地交给远方的朋友却成了一个大难题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非对称加密&lt;/strong&gt;则像一个银行保险箱：对外提供一个只能存东西的“公钥”（存款口），而取东西的“私钥”（保险箱钥匙）则由自己牢牢保管。它完美解决了密钥分发问题，但操作起来却相对“笨重”，处理大量数据时效率不高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有没有一种方法，能让我们同时拥有对称加密的“快”和非对称加密的“稳”呢？答案是肯定的，这就是我们今天要探讨的主角——&lt;strong&gt;混合加密 (Hybrid Encryption)&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="安全" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="加密" scheme="https://supermarkli.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
    <category term="密码学" scheme="https://supermarkli.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="安全" scheme="https://supermarkli.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>git之路：rebase &amp; cherry-pick</title>
    <link href="https://supermarkli.github.io/posts/1566a5aa/"/>
    <id>https://supermarkli.github.io/posts/1566a5aa/</id>
    <published>2025-08-05T10:01:30.000Z</published>
    <updated>2025-08-06T09:36:29.397Z</updated>
    
    
    <summary type="html">&lt;p&gt;在团队协作和日常开发中，&lt;code&gt;rebase&lt;/code&gt; 和 &lt;code&gt;cherry-pick&lt;/code&gt; 是 Git 中非常强大的两个命令。它们不仅能让你的提交历史更加清晰，还能灵活地“搬运”代码。本文结合一张可视化分支图，带你深入理解这两者的用法与区别，并掌握团队协作中的最佳实践。&lt;/p&gt;</summary>
    
    
    
    <category term="技术工具" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Git" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/Git/"/>
    
    
    <category term="Git" scheme="https://supermarkli.github.io/tags/Git/"/>
    
    <category term="Rebase" scheme="https://supermarkli.github.io/tags/Rebase/"/>
    
    <category term="Cherry-pick" scheme="https://supermarkli.github.io/tags/Cherry-pick/"/>
    
  </entry>
  
  <entry>
    <title>Shell 启动脚本：理解 bash、zsh 的启动流程</title>
    <link href="https://supermarkli.github.io/posts/shell-startup/"/>
    <id>https://supermarkli.github.io/posts/shell-startup/</id>
    <published>2025-08-02T06:20:26.000Z</published>
    <updated>2025-08-06T08:49:39.934Z</updated>
    
    
    <summary type="html">&lt;p&gt;如果你是一个经常使用 shell 的用户，几乎肯定会在主目录下有一个 &lt;code&gt;.bash_profile&lt;/code&gt; 或 &lt;code&gt;.bashrc&lt;/code&gt; 脚本，通常包含各种调整，比如设置环境变量（将某个目录添加到 &lt;code&gt;$PATH&lt;/code&gt;）、告诉 shell 做聪明的事情（如 &lt;code&gt;set -o noclobber&lt;/code&gt;）以及为命令添加各种别名（如 &lt;code&gt;alias please=sudo&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;（如果你真的很有条理，你会把所有点文件都放在某个仓库中，这样你就可以在所有工作的机器上保持设置同步。）&lt;/p&gt;
&lt;p&gt;无论如何，我怀疑很少有人知道 &lt;code&gt;.bash_profile&lt;/code&gt; 和 &lt;code&gt;.bashrc&lt;/code&gt; 这样的文件实际上什么时候被执行。当我刚开始时，我只是按照别人的建议把东西放在 &lt;code&gt;.bashrc&lt;/code&gt; 中，然后当它不工作时，就放到 &lt;code&gt;.bash_profile&lt;/code&gt; 中。我可以在这里停下来，只描述 bash 的启动过程（尽管它很愚蠢），但有一个复杂的情况是，我在几年前切换到了 zsh（并且没有回头），但偶尔会在没有安装 zsh 的机器上使用 bash。&lt;/p&gt;</summary>
    
    
    
    <category term="技术工具" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Linux" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/Linux/"/>
    
    
    <category term="Linux" scheme="https://supermarkli.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="https://supermarkli.github.io/tags/Shell/"/>
    
    <category term="Bash" scheme="https://supermarkli.github.io/tags/Bash/"/>
    
    <category term="Zsh" scheme="https://supermarkli.github.io/tags/Zsh/"/>
    
    <category term="系统配置" scheme="https://supermarkli.github.io/tags/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux任务控制：从进程管理到后台运行</title>
    <link href="https://supermarkli.github.io/posts/7a8b9c1d/"/>
    <id>https://supermarkli.github.io/posts/7a8b9c1d/</id>
    <published>2025-08-02T03:17:50.000Z</published>
    <updated>2025-08-06T08:49:23.442Z</updated>
    
    
    <summary type="html">&lt;p&gt;在Linux系统中，任务控制是每个用户都需要掌握的核心技能。无论是运行长时间的计算任务、管理多个进程，还是在SSH连接断开后保持程序运行，都离不开任务控制技术。本文将从基础概念出发，系统介绍Linux任务控制的完整知识体系，为你提供一份实用的技术指南。&lt;/p&gt;</summary>
    
    
    
    <category term="技术工具" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Linux" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/Linux/"/>
    
    
    <category term="Linux" scheme="https://supermarkli.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="https://supermarkli.github.io/tags/Shell/"/>
    
    <category term="进程管理" scheme="https://supermarkli.github.io/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    <category term="任务控制" scheme="https://supermarkli.github.io/tags/%E4%BB%BB%E5%8A%A1%E6%8E%A7%E5%88%B6/"/>
    
    <category term="后台运行" scheme="https://supermarkli.github.io/tags/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Dotfiles</title>
    <link href="https://supermarkli.github.io/posts/e5afd7e1/"/>
    <id>https://supermarkli.github.io/posts/e5afd7e1/</id>
    <published>2025-08-01T08:57:49.000Z</published>
    <updated>2025-08-06T08:49:10.178Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 Linux 或 macOS 系统中，那些以点（&lt;code&gt;.&lt;/code&gt;）开头的文件和文件夹，即 &lt;code&gt;dotfiles&lt;/code&gt;（如 &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.gitconfig&lt;/code&gt;），是塑造我们数字环境的灵魂。它们记录了从终端提示符的美化，到编辑器（如 Vim/Neovim）的每一个快捷键，再到窗口管理器的布局规则。一个精心调教的 &lt;code&gt;dotfiles&lt;/code&gt; 集合，是我们追求效率与个性的直接体现。&lt;/p&gt;
&lt;p&gt;然而，随着我们配置的日益精细和跨设备工作的常态化，一个问题浮出水面：如何优雅、高效地管理这些散落在主目录各处的“灵魂碎片”？</summary>
    
    
    
    <category term="技术工具" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux" scheme="https://supermarkli.github.io/tags/Linux/"/>
    
    <category term="Git" scheme="https://supermarkli.github.io/tags/Git/"/>
    
    <category term="工具" scheme="https://supermarkli.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Dotfiles" scheme="https://supermarkli.github.io/tags/Dotfiles/"/>
    
  </entry>
  
  <entry>
    <title>终端与Shell：从入门到看懂，一篇就够</title>
    <link href="https://supermarkli.github.io/posts/82543a5f/"/>
    <id>https://supermarkli.github.io/posts/82543a5f/</id>
    <published>2025-08-01T08:34:53.000Z</published>
    <updated>2025-08-06T08:49:36.874Z</updated>
    
    
    <summary type="html">&lt;p&gt;很多初学者都会被“终端”、“Shell”、“cmd”、“bash”、“zsh”、“PowerLevel10k”这些名词绕晕。本文旨在用“三层模型 + 一个比喻”帮你一次性理清它们的关系，并系统梳理其在 Windows、macOS、Linux 三大平台下的主流实现与配置方法，为你提供一份清晰、可随时查阅的技术指南。&lt;/p&gt;</summary>
    
    
    
    <category term="技术工具" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Linux" scheme="https://supermarkli.github.io/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/Linux/"/>
    
    
    <category term="Linux" scheme="https://supermarkli.github.io/tags/Linux/"/>
    
    <category term="Terminal" scheme="https://supermarkli.github.io/tags/Terminal/"/>
    
    <category term="Shell" scheme="https://supermarkli.github.io/tags/Shell/"/>
    
    <category term="Windows" scheme="https://supermarkli.github.io/tags/Windows/"/>
    
    <category term="macOS" scheme="https://supermarkli.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>关于Intel TDX的深度思考与技术剖析</title>
    <link href="https://supermarkli.github.io/posts/b63e909c/"/>
    <id>https://supermarkli.github.io/posts/b63e909c/</id>
    <published>2025-07-10T06:31:48.000Z</published>
    <updated>2025-08-06T08:49:10.178Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文深入探讨了可信执行环境（TEE）的核心技术，特别是Intel的Trust Domain Extensions (TDX)。我们从TEE的基本概念出发，逐步解析了其信任模型从传统虚拟化到机密虚拟机的演进历程。文章重点剖析了TDX的几大核心安全机制，包括远程证明、安全数据处理模式（内存计算与Sealing）、以及安全的密钥生命周期管理。通过对“代码修改”、“自我泄露”和“证明瞬时性”等关键问题的思辨，本文旨在为理解和应用TEE/TDX技术解决实际信任问题，提供一个完整而深入的框架。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="安全" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="TDX" scheme="https://supermarkli.github.io/tags/TDX/"/>
    
    <category term="TEE" scheme="https://supermarkli.github.io/tags/TEE/"/>
    
    <category term="Intel" scheme="https://supermarkli.github.io/tags/Intel/"/>
    
  </entry>
  
  <entry>
    <title>DeepSeek本地部署</title>
    <link href="https://supermarkli.github.io/posts/4f6ed32b/"/>
    <id>https://supermarkli.github.io/posts/4f6ed32b/</id>
    <published>2025-03-10T02:34:37.000Z</published>
    <updated>2025-08-06T08:49:10.178Z</updated>
    
    
    <summary type="html">&lt;p&gt;今天来尝试本地部署一下DeepSeek，看看效果如何。&lt;/p&gt;</summary>
    
    
    
    <category term="软件开发" scheme="https://supermarkli.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="人工智能" scheme="https://supermarkli.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="大语言模型" scheme="https://supermarkli.github.io/tags/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Understanding the Linux Kernel Lecture 1 Note</title>
    <link href="https://supermarkli.github.io/posts/b1b647fa/"/>
    <id>https://supermarkli.github.io/posts/b1b647fa/</id>
    <published>2025-01-18T14:38:39.000Z</published>
    <updated>2025-08-06T08:49:10.178Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;这本书是导师推荐给我很久了的，一直没啃完，希望这个寒假可以啃完这本八百页的书。(失败)&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://supermarkli.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://supermarkli.github.io/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://supermarkli.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="内核" scheme="https://supermarkli.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络通信漫谈 - 从TCP/IP到gRPC</title>
    <link href="https://supermarkli.github.io/posts/f520f9c/"/>
    <id>https://supermarkli.github.io/posts/f520f9c/</id>
    <published>2025-01-10T02:00:00.000Z</published>
    <updated>2025-08-06T08:48:58.190Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;计算机通信的层次&quot;&gt;计算机通信的层次&lt;/h2&gt;
&lt;p&gt;计算机通信是计算机网络形成的基础，这篇博客我们来简单了解一下现有的计算机网络通信协议。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络与通信" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="TLS" scheme="https://supermarkli.github.io/tags/TLS/"/>
    
    <category term="网络协议" scheme="https://supermarkli.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="gRPC" scheme="https://supermarkli.github.io/tags/gRPC/"/>
    
    <category term="HTTP" scheme="https://supermarkli.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>TLS Note</title>
    <link href="https://supermarkli.github.io/posts/32f5e233/"/>
    <id>https://supermarkli.github.io/posts/32f5e233/</id>
    <published>2025-01-09T15:43:56.000Z</published>
    <updated>2025-08-06T08:48:19.846Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是tls&quot;&gt;1. 什么是TLS&lt;/h2&gt;
&lt;p&gt;TLS（Transport Layer Security），即传输层安全协议，用于在两个通信应用程序之间提供保密性和数据完整性。它是一种加密协议，工作在传输层之上，为应用层协议提供安全性保障。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络与通信" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="TLS" scheme="https://supermarkli.github.io/tags/TLS/"/>
    
    <category term="网络安全" scheme="https://supermarkli.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="加密" scheme="https://supermarkli.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
    <category term="HTTPS" scheme="https://supermarkli.github.io/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>2.4G 无线通信笔记</title>
    <link href="https://supermarkli.github.io/posts/a25d78f8/"/>
    <id>https://supermarkli.github.io/posts/a25d78f8/</id>
    <published>2025-01-08T10:44:31.000Z</published>
    <updated>2025-08-06T08:47:05.534Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是2.4g无线通信&quot;&gt;什么是2.4G无线通信？&lt;/h2&gt;
&lt;p&gt;之前嵌入式project的通信中用到了2.4G模块，借此机会来了解一下这项技术。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络与通信" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="2.4G" scheme="https://supermarkli.github.io/tags/2-4G/"/>
    
    <category term="无线通信" scheme="https://supermarkli.github.io/tags/%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1/"/>
    
    <category term="WiFi" scheme="https://supermarkli.github.io/tags/WiFi/"/>
    
  </entry>
  
  <entry>
    <title>NFC Note</title>
    <link href="https://supermarkli.github.io/posts/78289205/"/>
    <id>https://supermarkli.github.io/posts/78289205/</id>
    <published>2025-01-07T14:27:47.000Z</published>
    <updated>2025-08-06T08:48:00.230Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是nfc&quot;&gt;什么是NFC？&lt;/h2&gt;
&lt;p&gt;今天听实验室师兄的分享时提到了NFC技术，自己对这个技术也是一知半解，所以来记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络与通信" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="无线通信" scheme="https://supermarkli.github.io/tags/%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1/"/>
    
    <category term="NFC" scheme="https://supermarkli.github.io/tags/NFC/"/>
    
    <category term="RFID" scheme="https://supermarkli.github.io/tags/RFID/"/>
    
  </entry>
  
  <entry>
    <title>编码</title>
    <link href="https://supermarkli.github.io/posts/6f8a188e/"/>
    <id>https://supermarkli.github.io/posts/6f8a188e/</id>
    <published>2025-01-06T11:15:19.000Z</published>
    <updated>2025-08-06T08:48:53.242Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;编码&quot;&gt;编码&lt;/h2&gt;
&lt;p&gt;今天在复习编译原理的时候，发现对底层的编码都是还停留在听过或者见过的状态，所以决定学习一下有关编码的知识。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://supermarkli.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="编码" scheme="https://supermarkli.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
</feed>
